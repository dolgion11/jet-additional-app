# app.py
import streamlit as st
from pathlib import Path
import importlib
import inspect

st.set_page_config(page_title="JET Audit Automation", layout="centered")
st.title("üìä JET Audit Automation Report Generator")

st.markdown("""
–≠–Ω—ç—Ö“Ø“Ø –∞–ø–ø –Ω—å —Ç–∞–Ω—ã –æ—Ä—É—É–ª—Å–∞–Ω **GL / TB Excel —Ñ–∞–π–ª—É—É–¥–∞–∞—Å**
–∞–≤—Ç–æ–º–∞—Ç –∞—É–¥–∏—Ç–æ—Ä—ã–Ω —Ç–µ—Å—Ç–∏–π–Ω —Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç–Ω—ç.
""")

# -----------------------------
# report –º–æ–¥—É–ª–∏–π–≥ —É—è–Ω —Ö–∞—Ç–∞–Ω –∞—á–∞–∞–ª–∞—Ö
# -----------------------------
def load_report_module():
    # 1) –¢–∞–Ω—ã ”©–º–Ω”© —Ö—ç–ª—Å—ç–Ω 2 –Ω—ç—Ä–∏–π–≥ –¥–∞—Ä–∞–∞–ª–ª–∞–∞—Ä –æ—Ä–æ–ª–¥–æ–Ω–æ
    candidates = ["all_reports_master_merged", "build_full_report_pretty"]
    errors = []
    for name in candidates:
        try:
            return importlib.import_module(name), name
        except Exception as e:
            errors.append(f"{name}: {e}")
    raise ImportError("report –º–æ–¥—É–ª–∏–π–≥ –∞—á–∞–∞–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π:\n" + "\n".join(errors))

report, report_module_name = load_report_module()

# -----------------------------
# –ú–æ–¥—É–ª–∏–π–Ω callable-—É—É–¥—ã–≥ –∂–∞–≥—Å–∞–∞—Ö
# -----------------------------
def list_callables(mod):
    items = []
    for k, v in vars(mod).items():
        if callable(v) and not k.startswith("_"):
            try:
                sig = str(inspect.signature(v))
            except Exception:
                sig = "(unknown)"
            items.append((k, sig))
    # –Ω—ç—Ä—ç—ç—Ä –Ω—å –±–∞–≥–∞—Ö–∞–Ω —ç—Ä—ç–º–±—ç–ª–Ω—ç (report/build/run –≥—ç—Ö –º—ç—Ç –¥—ç—ç—Ä –∏—Ä—ç—Ö—ç–¥ —Ç—É—Å –±–æ–ª–Ω–æ)
    def _score(n):
        base = 0
        if "report" in n: base -= 3
        if "build"  in n: base -= 2
        if "run"    in n: base -= 1
        if "main"   in n: base -= 4
        return (base, n)
    items.sort(key=lambda x: _score(x[0]))
    return items

available_funcs = list_callables(report)

with st.expander("‚öô –ò–ª—ç—Ä—Å—ç–Ω —Ñ—É–Ω–∫—Ü—É—É–¥ (–º–æ–¥—É–ª–∏–∞—Å)"):
    if available_funcs:
        st.write(
            "\n".join([f"- `{n}{sig}`" for n, sig in available_funcs])
        )
    else:
        st.warning("Callable —Ñ—É–Ω–∫—Ü –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –ú–æ–¥—É–ª–∏–π–Ω—Ö–æ–æ –¥–æ—Ç–æ—Ä public —Ñ—É–Ω–∫—Ü –Ω—ç–º—ç—ç—Ä—ç–π (–∂. `main`, `build_report`, `run`, ‚Ä¶).")

# –•—ç—Ä—ç–≥–ª—ç–≥—á—ç—ç—Å —Ñ—É–Ω–∫—Ü–∏–π–Ω –Ω—ç—Ä –∞–≤–∞—Ö (—Å–æ–Ω–≥–æ—Å–æ–Ω —ç—Å–≤—ç–ª –≥–∞—Ä–∞–∞—Ä –±–∏—á–∏—Ö)
default_func = available_funcs[0][0] if available_funcs else ""
func_name = st.selectbox(
    "–î—É—É–¥–∞—Ö —Ñ—É–Ω–∫—Ü—ç—ç —Å–æ–Ω–≥–æ (—ç—Å–≤—ç–ª –¥–æ–æ—Ä –≥–∞—Ä–∞–∞—Ä –±–∏—á):",
    [default_func] + [n for n, _ in available_funcs if n != default_func]
) if available_funcs else ""

func_name_manual = st.text_input("–ì–∞—Ä–∞–∞—Ä —Ñ—É–Ω–∫—Ü–∏–π–Ω –Ω—ç—Ä –æ—Ä—É—É–ª–∞—Ö (–∑–∞–∞–≤–∞–ª –±–∏—à):", value="")
entry_name = func_name_manual.strip() or func_name.strip()

# -----------------------------
# –§–∞–π–ª upload
# -----------------------------
gl_file = st.file_uploader("GL Excel —Ñ–∞–π–ª –æ—Ä—É—É–ª–Ω–∞ —É—É", type=["xlsx"])
tb_file = st.file_uploader("TB Excel —Ñ–∞–π–ª –æ—Ä—É—É–ª–∂ –±–æ–ª–Ω–æ (–∑–∞–∞–≤–∞–ª –±–∏—à)", type=["xlsx"])

# -----------------------------
# –¢—É—Å–ª–∞—Ö: entry-–≥ —É—è–Ω —Ö–∞—Ç–∞–Ω –¥—É—É–¥–∞—Ö
# -----------------------------
def run_entry(entry, gl_path: Path, tb_path: Path | None, out_path: Path):
    # –ó–∞—Ä–∏–º –∫–æ–¥ –≥–ª–æ–±–∞–ª —Ö—É–≤—å—Å–∞–≥—á–∏–¥ —Ç“Ø—à–∏–≥–ª—ç–¥—ç–≥ –±–∞–π–∂ –±–æ–ª–æ—Ö —Ç—É–ª —É—Ä—å–¥—á–∏–ª–∞–Ω –æ–Ω–æ–æ–Ω–æ
    setattr(report, "INPUT_XLSX_GL", gl_path)
    setattr(report, "INPUT_XLSX_TB", tb_path or gl_path)
    setattr(report, "OUTPUT_XLSX", out_path)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–π–Ω —Ö”©—Ä–≤“Ø“Ø–ª—ç–ª—Ç
    tb_eff = tb_path or gl_path

    # signature —Ö–∞—Ä–∂ —É—è–Ω —Ö–∞—Ç–∞–Ω –¥—É—É–¥–Ω–∞
    try:
        sig = inspect.signature(entry)
        params = list(sig.parameters.keys())
    except Exception:
        params = []

    try:
        if len(params) >= 3:
            return entry(gl_path, tb_eff, out_path)
        elif len(params) == 2:
            return entry(gl_path, tb_eff)
        elif len(params) == 1:
            return entry(gl_path)
        else:
            return entry()
    except TypeError:
        # ”©”©—Ä —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ —ç—ç–ª–∂–ª—ç–Ω –æ—Ä–æ–ª–¥—ä—ë
        for args in [
            (gl_path, tb_eff, out_path),
            (gl_path, tb_eff),
            (gl_path,),
            tuple()
        ]:
            try:
                return entry(*args)
            except TypeError:
                continue
        raise

# -----------------------------
# “Æ“Ø—Å–≥—ç—Ö —Ç–æ–≤—á
# -----------------------------
if st.button("‚úÖ –¢–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö"):
    if not gl_file:
        st.error("‚ö† GL —Ñ–∞–π–ª –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–∞—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π.")
    elif not entry_name:
        st.error("‚ö† –î—É—É–¥–∞—Ö —Ñ—É–Ω–∫—Ü–∏–π–Ω –Ω—ç—Ä—ç—ç —Å–æ–Ω–≥–æ—Ö/–±–∏—á–∏—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π.")
    else:
        gl_path = Path("uploaded_gl.xlsx")
        with open(gl_path, "wb") as f:
            f.write(gl_file.read())

        tb_path = None
        if tb_file:
            tb_path = Path("uploaded_tb.xlsx")
            with open(tb_path, "wb") as f:
                f.write(tb_file.read())

        out_path = Path("final_report.xlsx")

        try:
            entry = getattr(report, entry_name)
        except AttributeError:
            st.error(f"‚ùå `{report_module_name}` –º–æ–¥—É–ª—å–¥ `{entry_name}` –Ω—ç—Ä—Ç—ç–π —Ñ—É–Ω–∫—Ü –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.")
        else:
            try:
                with st.spinner(f"‚è≥ `{entry_name}` –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞..."):
                    run_entry(entry, gl_path, tb_path, out_path)

                st.success("‚úî –¢–∞–π–ª–∞–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–ª—ç—ç!")
                with open(out_path, "rb") as f:
                    st.download_button(
                        label="üì• –¢–∞–π–ª–∞–Ω —Ç–∞—Ç–∞—Ö",
                        data=f,
                        file_name="JET_Audit_Report.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    )
            except Exception as e:
                st.error("‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–æ–æ—Ä—Ö –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.")
                st.exception(e)
